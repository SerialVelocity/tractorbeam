---
- name: Get list of files
  aws_s3:
    bucket: "{{ _backup.bucket }}"
    prefix: "{{ _backup.prefix }}/{{ tractorbeam_scope | default('') }}"
    mode: list
    aws_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    aws_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
    s3_url: "{{ _backup.endpoint | default(omit) }}"
  register: _list_backup
- name: Filter and sort the list of files
  set_fact:
    _list_backup_sorted: "{{ _list_backup.s3_keys | select('regex', _regex) | list | sort }}"
  vars:
    _regex: "{{ _backup.name }}_[0-9]{14}\\.sql\\.gz"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
- name: Delete old backups
  aws_s3:
    bucket: "{{ _backup.bucket }}"
    prefix: "{{ _backup.prefix }}/{{ tractorbeam_scope | default('') }}"
    mode: delobj
    object: "{{ item }}"
    aws_access_key: "\
      {% if _backup.accessKeyFile is defined %}\
      {{ lookup('file', _backup.accessKeyFile) }}\
      {% else %}\
      {{ _backup.accessKey | default(omit) }}\
      {% endif %}"
    aws_secret_key: "\
      {% if _backup.secretKeyFile is defined %}\
      {{ lookup('file', _backup.secretKeyFile) }}\
      {% else %}\
      {{ _backup.secretKey | default(omit) }}\
      {% endif %}"
    s3_url: "{{ _backup.endpoint | default(omit) }}"
  loop: "{{ _list_backup_sorted[:-(_retain_count | int)] }}"
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
- include_tasks: "healhcheck.yml"
