---
- name: Get a list of backupSets.
  set_fact:
    _backupSets: "{{ _tractorbeam_default_backupSets | combine(tractorbeam.backupSets | default({}), recursive=True) }}"
- name: Stop if the backupSet doesn't exist.
  fail:
    msg: >
      The given backupSet name '{{ tractorbeam_scope | default() }}' is not in tractorbeam.yml.

      Known backupSets are: "{{ _backupSets.keys() | list | join(', ') }}"
  when:
    - _backupSets[tractorbeam_scope] is not defined
- name: Get the backupSet.
  set_fact:
    _backupSet: "{{ _backupSets[tractorbeam_scope] }}"
#
# Get ready for backups.
#
- name: Generate the backup timestamp.
  set_fact:
    _backup_timestamp: "{{lookup('pipe','date +%Y%m%d%H%M%S')}}"
- name: Create a temp directory to store files needed by the run
  tempfile:
    state: directory
    prefix: "tractorbeam-run-{{ _backup_timestamp }}"
  register: _run_temp_dir
  notify:
    - delete temp items
#
# Backups start here.
#
- name: Work with databases
  include_tasks: "1-databases.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.databases | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
- name: Work with platform.sh databases
  include_tasks: "2-platformshDatabases.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.platformshDatabases | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
- name: Work with archives
  include_tasks: "3-archives.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.archives | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
- name: Work with file backups
  include_tasks: "4-files.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.files | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
- name: Work with platform.sh files
  include_tasks: "5-platformshFiles.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.platformshFiles | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
#
# S3 to S3 backups are always taken last!
#
- name: Work with s3 backups
  include_tasks: "6-s3.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.s3 | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
#
# Rotate backups that are subject to a retention period.
#
# Some S3 providers cannot handle an s3cmd sync immediately after files are
# deleted. The file disapppears mid-sync and causes issues. So we rotate after
# bucket syncs. This will ripple down to s3 to s3 backups later.
#
- name: Rotate database backups
  include_tasks: "7-rotate-databases.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.databases | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
- name: Rotate platform.sh database backups
  include_tasks: "8-rotate-platformshDatabases.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.platformshDatabases | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
- name: Rotate archive backups
  include_tasks: "9-rotate-archives.yml"
  vars:
    _retain_count: "{{ _backupSet.retainCount }}"
  loop: "{{ tractorbeam.archives | default([]) }}"
  loop_control:
    loop_var: _backup
  no_log: "{{ flightdeck_debug | default(false) | ternary(false, true) }}"
  when:
    - _backup.disabled | default(false) == false
    - tractorbeam_scope in _backup.backupSets | default(_tractorbeam_default_sets_for_backup)
